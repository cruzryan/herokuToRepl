/// <reference types="node" />
import { Buffer } from 'buffer';
import { Client, Channel } from '@replit/crosis';
import { api } from '@replit/protocol';

declare class GraphQL {
    private headers;
    protected queries: {
        [index: string]: string;
    };
    constructor(token: string);
    request(query: string, variables?: {
        [index: string]: any;
    }): Promise<any>;
}

interface CrosisConfigOptions {
    token: string;
    replId: string;
    ignore?: string;
}
interface User {
    id: number;
    username: string;
}
interface Language {
    id: string;
    runner: boolean;
    packager3: boolean;
    terminal: boolean;
    interpreter: boolean;
    engine: string;
    mainFile: string | null;
    supportsMultiFiles: boolean;
}
interface Repl {
    id: string;
    slug: string;
    language: string;
    isPrivate: boolean;
    lang: Language;
}
interface ConfigFiles {
    '.replit': () => Promise<string | boolean>;
    'replit.nix': () => Promise<string | boolean>;
    ignore: () => Promise<string | boolean>;
    env: null;
}
declare type ReadEncodingValues = BufferEncoding | undefined;
declare type ReadEncodingType<T extends ReadEncodingValues> = T extends BufferEncoding ? string : T extends undefined ? Buffer : never;
declare type DirectoryContentType<T extends boolean> = T extends true ? api.File : T extends false ? string : never;
declare type PackageListContentType<T extends boolean> = T extends true ? api.IPackage : T extends false ? string : never;
declare class CrosisClient {
    private token;
    replId: string;
    protected client: Client;
    protected gql: GraphQL;
    user?: User;
    repl?: Repl;
    configFiles: ConfigFiles;
    protected channels: {
        [index: string]: Channel;
    };
    connected: boolean;
    persisting: boolean;
    constructor(options: CrosisConfigOptions);
    private cmdTimeout;
    connect(): Promise<void>;
    persist(): Promise<boolean>;
    close(): void;
    channel(name: string): Promise<Channel>;
    read<T extends ReadEncodingValues>(path: string, encoding?: T): Promise<ReadEncodingType<T>>;
    readdir(path: string, raw?: boolean): Promise<DirectoryContentType<typeof raw>[]>;
    recursedir(path: string, withIgnore?: boolean): Promise<string[]>;
    write(path: string, file: string | Buffer): Promise<boolean>;
    mkdir(path: string): Promise<boolean>;
    remove(path: string): Promise<boolean>;
    removeAll(): Promise<boolean>;
    move(oldPath: string, newPath: string): Promise<boolean>;
    packageInstall(): Promise<boolean>;
    packageAdd(packages: string[]): Promise<boolean>;
    packageRemove(packages: string[]): Promise<boolean>;
    packageList(raw?: boolean): Promise<PackageListContentType<typeof raw>[] | boolean>;
    packageSearch(query: string): Promise<api.IPackage[] | boolean>;
    packageInfo(name: string): Promise<api.IPackage | boolean>;
    shellRun(timeout?: number): Promise<boolean>;
    shellExec(cmd: string, args?: string[], timeout?: number): Promise<boolean>;
    shellStop(timeout?: number): Promise<boolean>;
    snapshot(): Promise<boolean>;
    lsp(message: string): Promise<boolean>;
}
//# sourceMappingURL=crosis.d.ts.map

export { CrosisClient as Crosis };
