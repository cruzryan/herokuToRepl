"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var __1 = require("..");
var done_1 = require("../__testutils__/done");
var genConnectionMetadata = require('../../debug/genConnectionMetadata');
var WebSocket = require('ws');
jest.setTimeout(30 * 1000);
var testingClients = [];
function getClient(done) {
    var c = new __1.Client();
    c.setUnrecoverableErrorHandler(done);
    testingClients.push(c);
    return c;
}
afterAll(function () {
    testingClients.forEach(function (c) {
        c.destroy();
    });
});
test('handles firewall denied condition specifically', function (done) {
    var client = getClient(done);
    var ctx = { username: 'zyzz' };
    var connmeta = genConnectionMetadata();
    client.open({
        fetchConnectionMetadata: function () {
            return Promise.resolve(__assign(__assign({}, connmeta), { error: null }));
        },
        WebSocketClass: WebSocket,
        context: ctx,
    }, function () {
        var firewalledClient = getClient(done);
        firewalledClient.onFirewallDenied = (0, done_1.wrapWithDone)(done, function () {
            client.destroy();
            firewalledClient.destroy();
            done();
        });
        var firewalledCtx = { username: 'firewallzyzz' };
        firewalledClient.open({
            fetchConnectionMetadata: function () {
                return Promise.resolve(__assign(__assign({}, genConnectionMetadata({ restrictNetwork: true, repl: connmeta.repl })), { error: null }));
            },
            WebSocketClass: WebSocket,
            context: firewalledCtx,
        }, function () { });
    });
});
//# sourceMappingURL=firewall.test.js.map