"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var protocol_1 = require("@replit/protocol");
var __1 = require("..");
var jest_websocket_mock_1 = require("jest-websocket-mock");
var mock_socket_1 = require("mock-socket");
var genConnectionMetadata = require('../../debug/genConnectionMetadata');
jest.setTimeout(1000);
var testingClients = [];
var sendFromServer = function (cmd, ws) {
    var cmdBuf = protocol_1.api.Command.encode(cmd).finish();
    var buffer = cmdBuf.buffer.slice(cmdBuf.byteOffset, cmdBuf.byteOffset + cmdBuf.length);
    ws.send(buffer);
};
var genConnectionMetadataWithGurl = function (gurl) {
    var connectionMetadata = genConnectionMetadata();
    connectionMetadata.gurl = gurl;
    connectionMetadata.token = '';
    return connectionMetadata;
};
var port = 9751;
afterAll(function () {
    testingClients.forEach(function (c) {
        c.destroy();
    });
});
describe('redirect handling', function () {
    test('redirect message results in client reconnecting to target', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, client, addr1, addr2, server1, server2, connectionMetadata, cmdJson, redirect;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ctx = { username: 'zyzz' };
                    client = new __1.Client();
                    client.setUnrecoverableErrorHandler(function (e) {
                        console.log('got unrecoverable error: ', e);
                    });
                    testingClients.push(client);
                    addr1 = 'ws://localhost:' + port;
                    addr2 = 'ws://localhost:' + port + 1;
                    server1 = new jest_websocket_mock_1.default(addr1 + '/wsv2/');
                    server2 = new jest_websocket_mock_1.default(addr2 + '/wsv2/');
                    connectionMetadata = genConnectionMetadataWithGurl(addr1);
                    client.open({
                        fetchConnectionMetadata: function () {
                            return Promise.resolve(__assign(__assign({}, connectionMetadata), { error: null }));
                        },
                        WebSocketClass: mock_socket_1.WebSocket,
                        context: ctx,
                    }, function () { });
                    return [4, expect(server1.connected).resolves.toBeTruthy()];
                case 1:
                    _a.sent();
                    cmdJson = {
                        redirect: {
                            url: addr2,
                        },
                    };
                    redirect = protocol_1.api.Command.create(cmdJson);
                    sendFromServer(redirect, server1);
                    return [4, expect(server2.connected).resolves.toBeTruthy()];
                case 2:
                    _a.sent();
                    server1.close();
                    server2.close();
                    return [2];
            }
        });
    }); });
    test('connection closed after redirect results in client connecting to original server', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, client, addr1, addr2, server1, server2, connectionMetadata, cmdJson, redirect;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ctx = { username: 'zyzz' };
                    client = new __1.Client();
                    client.setUnrecoverableErrorHandler(function (e) {
                        console.log('got unrecoverable error: ', e);
                    });
                    testingClients.push(client);
                    addr1 = 'ws://localhost:' + port;
                    addr2 = 'ws://localhost:' + port + 1;
                    server1 = new jest_websocket_mock_1.default(addr1 + '/wsv2/');
                    server2 = new jest_websocket_mock_1.default(addr2 + '/wsv2/');
                    connectionMetadata = genConnectionMetadataWithGurl(addr1);
                    client.open({
                        fetchConnectionMetadata: function () {
                            return Promise.resolve(__assign(__assign({}, connectionMetadata), { error: null }));
                        },
                        WebSocketClass: mock_socket_1.WebSocket,
                        context: ctx,
                    }, function () { });
                    return [4, expect(server1.connected).resolves.toBeTruthy()];
                case 1:
                    _a.sent();
                    cmdJson = {
                        redirect: {
                            url: addr2,
                        },
                    };
                    redirect = protocol_1.api.Command.create(cmdJson);
                    sendFromServer(redirect, server1);
                    return [4, expect(server2.connected).resolves.toBeTruthy()];
                case 2:
                    _a.sent();
                    server2.close();
                    return [4, expect(server1.connected).resolves.toBeTruthy()];
                case 3:
                    _a.sent();
                    server1.close();
                    return [2];
            }
        });
    }); });
    test('connection error after redirect results in client connecting to original server', function () { return __awaiter(void 0, void 0, void 0, function () {
        var ctx, client, addr1, addr2, server1, server2, connectionMetadata, cmdJson, redirect;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ctx = { username: 'zyzz' };
                    client = new __1.Client();
                    client.setUnrecoverableErrorHandler(function (e) {
                        console.log('got unrecoverable error: ', e);
                    });
                    testingClients.push(client);
                    addr1 = 'ws://localhost:' + port;
                    addr2 = 'ws://localhost:' + port + 1;
                    server1 = new jest_websocket_mock_1.default(addr1 + '/wsv2/');
                    server2 = new jest_websocket_mock_1.default(addr2 + '/wsv2/');
                    connectionMetadata = genConnectionMetadataWithGurl(addr1);
                    client.open({
                        fetchConnectionMetadata: function () {
                            return Promise.resolve(__assign(__assign({}, connectionMetadata), { error: null }));
                        },
                        WebSocketClass: mock_socket_1.WebSocket,
                        context: ctx,
                    }, function () { });
                    return [4, expect(server1.connected).resolves.toBeTruthy()];
                case 1:
                    _a.sent();
                    cmdJson = {
                        redirect: {
                            url: addr2,
                        },
                    };
                    redirect = protocol_1.api.Command.create(cmdJson);
                    sendFromServer(redirect, server1);
                    return [4, expect(server2.connected).resolves.toBeTruthy()];
                case 2:
                    _a.sent();
                    server2.error();
                    return [4, expect(server1.connected).resolves.toBeTruthy()];
                case 3:
                    _a.sent();
                    server1.close();
                    return [2];
            }
        });
    }); });
});
//# sourceMappingURL=redirect.test.js.map