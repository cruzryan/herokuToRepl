"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConnectionStr = exports.getWebSocketClass = exports.defaultGetNextRetryDelay = void 0;
var urllib = require("url");
var BACKOFF_FACTOR = 1.7;
var MAX_BACKOFF = 15000;
function defaultGetNextRetryDelay(retryNumber) {
    var randomMs = Math.floor(Math.random() * 500);
    var backoff = Math.pow(BACKOFF_FACTOR, retryNumber) * 1000;
    return Math.min(backoff, MAX_BACKOFF) + randomMs;
}
exports.defaultGetNextRetryDelay = defaultGetNextRetryDelay;
function isWebSocket(w) {
    if (typeof w !== 'object' && typeof w !== 'function') {
        return false;
    }
    if (!w) {
        return false;
    }
    return 'OPEN' in w && w.OPEN === 1;
}
function getWebSocketClass(WebSocketClass) {
    if (WebSocketClass) {
        if (!isWebSocket(WebSocketClass)) {
            throw new Error('Passed in WebSocket does not look like a standard WebSocket');
        }
        return WebSocketClass;
    }
    if (typeof WebSocket !== 'undefined') {
        if (!isWebSocket(WebSocket)) {
            throw new Error('Global WebSocket does not look like a standard WebSocket');
        }
        return WebSocket;
    }
    throw new Error('Please pass in a WebSocket class or add it to global');
}
exports.getWebSocketClass = getWebSocketClass;
function getConnectionStr(connectionMetadata, pollingHost) {
    var gurl = urllib.parse(connectionMetadata.gurl);
    if (pollingHost) {
        gurl.hostname = pollingHost;
        gurl.host = pollingHost;
        gurl.pathname = "/wsv2/".concat(connectionMetadata.token, "/").concat(encodeURIComponent(connectionMetadata.gurl));
    }
    else {
        gurl.pathname = "/wsv2/".concat(connectionMetadata.token);
    }
    return urllib.format(gurl);
}
exports.getConnectionStr = getConnectionStr;
//# sourceMappingURL=helpers.js.map